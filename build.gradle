plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

import jaci.gradle.nativedeps.*

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'deploy')
            // Deploy to RoboRIO target, into /home/lvuser/
            targets << "roborio"
            directory = '/home/lvuser/'
        }
    }
}

// Set this to true to include the src folder in the include directories passed
// to the compiler. Some eclipse project imports depend on this behavior.
// We recommend leaving this disabled if possible. Note for eclipse project
// imports this is enabled by default. For new projects, its disabled
def includeSrcInIncludeRoot = false

// Defining my C++ project. In this case, it is called 'frcUserProgram',
// and is of the language C++.
model {
    libraries {
        boostLib(NativeLib) {
            libraryName = 'boostLib'
            targetPlatforms = [wpi.platforms.roborio, wpi.platforms.desktop]

            headerDirs << 'include'                         // Directories for headers
            //staticMatchers << '**/*.a'                      // Static Libraries to be linked at compile time
            //sharedMatchers << '**/*.so'                     // Shared Libraries to be linked at compile time
            //dynamicMatchers << '**/*.so'                    // Libraries that aren't linked, but still needed at runtime.

            //systemLibs << 'boost_system'

            file = project.file("libraries/boost.zip")
            // Load from filesystem instead. Can be given a zip or a directory.
        }

        spdlog(NativeLib) {
            libraryName = 'spdlog'
            targetPlatforms = [wpi.platforms.roborio, wpi.platforms.desktop]

            headerDirs << 'spdlog-1.x/include'                         // Directories for headers
            //staticMatchers << '**/*.a'                      // Static Libraries to be linked at compile time
            //sharedMatchers << '**/*.so'                     // Shared Libraries to be linked at compile time
            //dynamicMatchers << '**/*.so'                    // Libraries that aren't linked, but still needed at runtime.

            //systemLibs << 'boost_system'

            file = project.file("libraries/spdlog.zip")
            // Load from filesystem instead. Can be given a zip or a directory.
        }
    }

    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio

            binaries.all {
                if (buildType.name == 'release') it.buildable = false
                //cppCompiler.args << '-g'
            }

            sources.cpp {
                // This is where our source files are located (src/cpp for C++ files, src/include for headers)
                source {
                    srcDirs = ['src/']
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDirs = ['src/', 'include/']
                    include '**/*.hpp', '**/*.h'
                }

                // Define my dependencies. In this case, WPILib (+ friends), CTRE Toolsuite (Talon SRX) and NavX.
                //lib library: "wpilib"
                //lib library: "ctre"
                //lib library: "navx"
                //lib library: "pathfinder"
                //lib library: "boost"
            }

            useLibrary(it, "wpilib", "boostLib", "spdlog")
            wpi.deps.vendor.cpp(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            sources.cpp {
                source {
                    srcDir 'tests'
                    include '**/*.cpp'
                }
            }

            useLibrary(it, "wpilib", "googletest", "boostLib", "spdlog")
            wpi.deps.vendor.cpp(it)
        }
    }
}

wrapper {
    gradleVersion = '5.0'
}
